from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import  FSMContext

from app.service import kanye_quote
from app.database.requests import set_user
import app.Keyboards as kb
from app.Keyboards import phone_keyboard



router = Router()
class Reg(StatesGroup):
    name = State()
    number = State()
    anime = State()
    book = State()

    @router.message(CommandStart())
    async def cmd_start(message: Message, state: FSMContext):
        user_registered = await set_user(message.from_user.id)
        if user_registered:
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
            await state.set_state(Reg.name)
        else:
            await message.answer(
                f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å


@router.callback_query(F.data=='quote')
async def callback_quote(call: CallbackQuery):
    quote = await kanye_quote()
    await call.message.answer(quote)
    await call.answer()



@router.message(Command('help'))
async def get_help(message: Message):
    await message.answer("–ö–û–ú–ê–ù–î–´: \n –ü–û–í–¢–û–†–ù–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø /reg\n–ü–û–ú–û–©–¨ /help\n–ù–ê–ü–ò–°–ê–¢–¨ –¢–ï–•. –ü–û–î–ï–†–ñ–ö–ê /support")


@router.message(F.text == "How are you?")
async  def how_are_you(message: Message):

    await message.answer("OK!")

@router.message(F.photo)
async def get_photo(message: Message):
    await message.answer(f"id photo {message.photo[-1].file_id}")

@router.callback_query(F.data == 'catalog')
async def catalog(callback:CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–∞–ª–æ–≥')
    await callback.message.edit_text("–ö–∞—Ç–∞–ª–æ–≥ –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ üéØ ", reply_markup=await kb.inline_cloth())

@router.callback_query(F.data =='contacts')
async  def contacts(callback:CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã")
    await callback.message.edit_text("–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:", reply_markup=await kb.inline_contacts())

@router.message

@router.message(Command("reg"))
async def reg_one(message: Message, state:FSMContext):
    await  state.set_state(Reg.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@router.message(Reg.name)
async def reg_two(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg.number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:', reply_markup=phone_keyboard)

@router.message(Reg.anime)
async def reg_three(message: Message, state: FSMContext):
    await state.update_data(anime=message.text)
    await state.set_state(Reg.book)
    await message.answer("–ö–∞–∫—É—é –∫–Ω–∏–≥—É –≤—ã –ª—é–±–∏—Ç–µ?")



@router.message(Reg.number)
async def two_three(message: Message, state: FSMContext):
    if message.contact:
        phone_number = message.contact.phone_number
    else:
        phone_number = message.text
    await state.update_data(number=phone_number)
    await state.set_state(Reg.anime)
    await message.answer("–í–∞—à–µ –ª—é–±–∏–º–æ–µ –∞–Ω–∏–º–µ?")
@router.message(Reg.book)
async def reg_four(message: Message, state: FSMContext):
    await state.update_data(book=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–∏–≥—É
    data = await state.get_data()
    await message.answer(f"C–ø–∞—Å–∏–±–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–ò–º—è: {data['name']}\n–ù–æ–º–µ—Ä: {data['number']}\n–í–∞—à–µ –ª—é–±–∏–º–æ–µ –∞–Ω–∏–º–µ: {data['anime']}\n–õ—é–±–∏–º–∞—è –∫–Ω–∏–≥–∞: {data['book']}\n –¢–µ–ø–µ—Ä—å –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –æ–ø—Ä–æ—Å—É, –≤–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å", reply_markup=kb.main)
    await state.clear()


